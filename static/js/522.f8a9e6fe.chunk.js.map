{"version":3,"file":"static/js/522.f8a9e6fe.chunk.js","mappings":"uPAIMA,GAAOC,EAAAA,EAAAA,OAAK,kBAAM,6BAAsB,IACxCC,GAAUD,EAAAA,EAAAA,OAAK,kBAAM,4BAA4B,IACjDE,GAAOF,EAAAA,EAAAA,OAAK,kBAAM,sCAAsB,IACxCG,GAAUH,EAAAA,EAAAA,OAAK,kBAAM,6BAA4B,IACjDI,GAAOJ,EAAAA,EAAAA,OAAK,kBAAM,4BAAsB,IACxCK,GAAUL,EAAAA,EAAAA,OAAK,kBAAM,4BAA4B,IACjDM,GAASN,EAAAA,EAAAA,OAAK,kBAAM,6BAA0B,IAC9CO,GAAWP,EAAAA,EAAAA,OAAK,kBAAM,6BAA8B,IACpDQ,GAAWR,EAAAA,EAAAA,OAAK,kBAAM,6BAA8B,IAmF7CS,EAAW,SACvBC,EACAC,GAEA,GAAa,MAATD,EAAe,CAClB,IAAME,EAAWC,KAAKC,IAAIJ,EAAQ,IAElC,OADcG,KAAKE,MAAMH,EAG1B,CAAO,OAAID,EACH,IAEA,GAET,EAEaK,EAAc,SAACC,EAAkBP,GAC7C,IAAIQ,EAAQC,OAAOF,EAASG,UAAU,EAAG,IACrCC,EAAUF,OAAOF,EAASG,UAAU,EAAG,KAC3CC,GAAWX,GACG,IACbW,GAAW,GACXH,GAAS,GAENG,EAAU,KACbA,GAAW,GACXH,GAAS,GAENA,EAAQ,IACXA,GAAS,IAENA,EAAQ,KACXA,GAAS,IAEV,IAAII,EAAaJ,EAAQ,GAAE,WAAOA,GAAK,UAAQA,GAC3CK,EAAeF,EAAU,GAAE,WAAOA,GAAO,UAAQA,GACrD,MAAM,GAAN,OAAUC,EAAU,YAAIC,EACzB,EAEaC,EAAU,SAACC,GACvB,OAAiB,MAAbA,EACIA,EAAUL,UAAU,GAAI,IAExB,EAET,EAgHA,UAvFgB,SAACM,GAChB,IACIC,EAMAjB,EAPEkB,EAxBa,SAACC,GACpB,IAAMC,EAAK,EAAIjB,KAAKkB,KAAK,GACjBC,EAA8BH,EAA9BG,oBAAqBC,EAASJ,EAATI,KAC7B,GAAID,EAAqB,CACxB,IAAkBE,EAAgCF,EAA1CG,SAA8BC,EAAYJ,EAAvBK,UACnBC,EAAaL,EAAbK,SAEFC,EAAYT,EAAKI,EAAW,IAC5BM,EAAYV,EAFgCQ,EAA1CH,SAE0B,IAE5BM,EAAUX,GADFM,EAHoCE,EAAvBD,WAIG,IACxBK,EACL7B,KAAK8B,IAAIJ,GAAY1B,KAAK8B,IAAIH,GAC9B3B,KAAK+B,IAAIL,GAAY1B,KAAK+B,IAAIJ,GAAY3B,KAAK+B,IAAIH,GAIpD,OAF2B,IADX5B,KAAKgC,KAAKH,GACQZ,EACX,GAAK,MAE7B,CACC,OAAO,IAET,CAGkBgB,CAAYpB,EAAMG,KAQX,kBALvBF,EADGD,EAAMG,IAAIlB,UACFF,EAASiB,EAAMG,IAAInB,MAAOgB,EAAMG,IAAIlB,WAEpCF,EAASiB,EAAMG,IAAInB,OAAO,IAKrCA,EAAK,UADQiB,EAAW,EAAI,SAAMA,EAAW,EAAI,IAAM,QACxC,OAAGA,GAElBjB,EAAQiB,EAET,IACIoB,EADA9B,EAAWO,EAAQE,EAAMG,IAAImB,MAEX,MAAlBtB,EAAMG,IAAImB,MAAmC,MAAnBtB,EAAMG,IAAInB,MACvCqC,EAAW/B,EAAYC,EAAUE,OAAOQ,IACZ,MAAlBD,EAAMG,IAAImB,MAA6B,MAAbrB,GACpCoB,EAAW9B,EACXA,EAAW,IAEX8B,EACCvB,EAAQE,EAAMG,IAAIoB,sBAClBzB,EAAQE,EAAMG,IAAIqB,gBAClB1B,EAAQE,EAAMG,IAAIsB,aAEpB,MAAgDzB,EAAMG,IAA9CuB,EAAI,EAAJA,KAAMC,EAAU,EAAVA,WAAYC,EAAO,EAAPA,QAASC,EAAQ,EAARA,SACnC,OACC,QAAC,EAAAC,SAAQ,YACR,eACCC,UAAU,MAEVC,GAAI,CAAEC,QAAS,OAAQC,oBAAqB,CAAC,iBAAkB,iBAAkB,mBAAoB,WAErG,QAAC7D,EAAI,CAAC8D,KAAMd,EAAUe,MAAM,cAC5B,QAAC/D,EAAI,CAAC8D,KAAM5C,EAAU6C,MAAM,cAC5B,eACCL,UAAU,QACVC,GAAI,CACHK,UAAW,CAAC,SAAU,SAAU,SAChCC,WAAY,CAAC,cAAe,eAC3B,SAEDtD,KAEF,QAACT,EAAO,CAACmD,KAAMA,KACf,QAAClD,EAAI,CAACkD,KAAMA,KACZ,eACCK,UAAU,YACVC,GAAI,CAAEK,UAAW,OAAQC,WAAY,CAAC,cAAe,gBAAiB,SAErEX,KAEF,eACCI,UAAU,WACVC,GAAI,CACHK,UAAW,SACXC,WAAY,CAAC,cAAe,gBAC3B,SAEDT,KAEF,QAACpD,EAAO,CAACmD,QAASA,KAClB,QAAClD,EAAI,CAACkD,QAASA,KACf,QAACjD,EAAO,CAACiD,QAASA,KAClB,QAAChD,EAAM,CAACgD,QAASA,KACjB,QAAC,IAAO,CAACW,SAAUb,EAAKa,aAnCnBvC,EAAMG,IAAIqC,SAqChB,eACCT,UAAU,cAEVC,GAAI,CACHC,QAAS,OACTC,oBAAqB,kBACrBO,aAAc,CAAC,iBAAkB,iBAAkB,SAClD,WAEF,QAAC,IAAQ,CAACvC,SAAUA,KACpB,QAACrB,EAAQ,CAAC+C,QAASA,KACnB,QAAC9C,EAAQ,CAAC8C,QAASA,MAAW,cATlB5B,EAAMG,IAAIqC,WAa1B,C","sources":["components/Arrival/Arrival.tsx"],"sourcesContent":["/** @jsxImportSource theme-ui */\nimport { Fragment, lazy } from \"react\"\nimport { Distance } from \"../Distance/Distance\"\nimport Carrier from \"../Carrier/Carrier\"\nconst Time = lazy(() => import(\"../Time/Time\"))\nconst Product = lazy(() => import(\"../Product/Product\"))\nconst Line = lazy(() => import(\"../Line/Line\"))\nconst Barrier = lazy(() => import(\"../Barrier/Barrier\"))\nconst Bike = lazy(() => import(\"../Bike/Bike\"))\nconst Warning = lazy(() => import(\"../Warning/Warning\"))\nconst Status = lazy(() => import(\"../Status/Status\"))\nconst Warntext = lazy(() => import(\"../Warntext/Warntext\"))\nconst Stattext = lazy(() => import(\"../Stattext/Stattext\"))\n\ntype Location = {\n\ttype: \"location\"\n\tlatitude: number\n\tlongitude: number\n}\n\ntype Remarks = {\n\tcode: string | undefined\n\tsummary: string | null | undefined\n\ttext: string | undefined\n\ttype: string | undefined\n\tvalidFrom: string | undefined\n\tvalidUntil: string | undefined\n}[]\n\ntype Operator = {\n  type: \"operator\",\n  id: string,\n  name: string\n}\n\ntype LINE_A = {\n\tcolor: {\n\t\tfg: string\n\t\tbg: string\n\t}\n\texpress: boolean\n\tfahrtNr: string\n\tid: string\n\tmetro: boolean\n\tmode: string\n\tname: string\n\tnight: boolean\n\tnr: number\n\toperator: Operator\n\tproduct: \"regional\" | \"suburban\" | \"subway\"\n\ttype: string\n}\n\ntype LINE_B = {\n\texpress: boolean\n\tfahrtNr: string\n\tid: string\n\tmetro: boolean\n\tmode: string\n\tname: string\n\tnight: boolean\n\tnr: number\n\toperator: Operator\n\tproduct: \"express\" | \"tram\" | \"bus\" | \"ferry\"\n\ttype: string\n}\n\ntype Arr = {\n\tcancelled: boolean | undefined\n\tcurrentTripPosition: Location\n\tdelay: number | null\n\tdirection: string | null\n\tformerScheduledWhen?: string\n\tline: LINE_A | LINE_B\n\tplannedPlatform?: string\n\tplannedWhen?: string\n\tplatform?: number | string\n\tprognosedPlatform?: string\n\tprognosisType: string | null | undefined\n\tprovenance: string | null\n\tremarks: Remarks\n\tscheduledWhen?: string\n\tstop: {\n\t\tid: string\n\t\tname: string\n\t\tlocation: Location\n\t}\n\ttripId: string\n\twhen?: string\n}\n\ntype Props = {\n\tarr: Arr\n}\n\nexport const getDelay = (\n\tdelay: number | null | undefined,\n\tcancelled: boolean | null | undefined\n) => {\n\tif (delay != null) {\n\t\tconst valueRaw = Math.abs(delay / 60)\n\t\tconst value = Math.round(valueRaw)\n\t\treturn value\n\t\t// return `${sign}${value}`\n\t} else if (cancelled) {\n\t\treturn \"X\"\n\t} else {\n\t\treturn \"?\"\n\t}\n}\n\nexport const getPlanTime = (realtime: string, delay: number) => {\n\tlet hours = Number(realtime.substring(0, 2))\n\tlet minutes = Number(realtime.substring(3, 5))\n\tminutes -= delay\n\tif (minutes < 0) {\n\t\tminutes += 60\n\t\thours -= 1\n\t}\n\tif (minutes > 59) {\n\t\tminutes -= 60\n\t\thours += 1\n\t}\n\tif (hours < 0) {\n\t\thours += 24\n\t}\n\tif (hours > 23) {\n\t\thours -= 24\n\t}\n\tlet hourString = hours < 10 ? `0${hours}` : `${hours}`\n\tlet minuteString = minutes < 10 ? `0${minutes}` : `${minutes}`\n\treturn `${hourString}:${minuteString}`\n}\n\nexport const getTime = (timestamp: string | undefined | null) => {\n\tif (timestamp != null) {\n\t\treturn timestamp.substring(11, 16)\n\t} else {\n\t\treturn \"\"\n\t}\n}\n\nconst getDistance = (arr: Arr) => {\n\tconst pi = 4 * Math.atan(1)\n\tconst { currentTripPosition, stop } = arr\n\tif (currentTripPosition) {\n\t\tconst { latitude: currLat, longitude: currLng } = currentTripPosition\n\t\tconst { location } = stop\n\t\tconst { latitude: stopLat, longitude: stopLng } = location\n\t\tconst rCurrLat = (pi * currLat) / 180\n\t\tconst rStopLat = (pi * stopLat) / 180\n\t\tconst theta = currLng - stopLng\n\t\tconst rTheta = (pi * theta) / 180\n\t\tconst cosDist =\n\t\t\tMath.sin(rCurrLat) * Math.sin(rStopLat) +\n\t\t\tMath.cos(rCurrLat) * Math.cos(rStopLat) * Math.cos(rTheta)\n\t\tconst radDist = Math.acos(cosDist)\n\t\tconst degDist = (radDist * 180) / pi\n\t\tconst dist = degDist * 60 * 1.1515\n\t\treturn dist\n\t} else {\n\t\treturn null\n\t}\n}\n\nconst Arrival = (props: Props) => {\n\tconst distance = getDistance(props.arr)\n\tlet delayMin\n\tif (props.arr.cancelled) {\n\t\tdelayMin = getDelay(props.arr.delay, props.arr.cancelled)\n\t} else {\n\t\tdelayMin = getDelay(props.arr.delay, false)\n\t}\n\tlet delay\n\tif (typeof delayMin === \"number\") {\n\t\tconst sign = delayMin < 0 ? \"–\" : delayMin > 0 ? \"+\" : \"±\"\n\t\tdelay = `${sign}${delayMin}`\n\t} else {\n\t\tdelay = delayMin\n\t}\n\tlet realtime = getTime(props.arr.when)\n\tlet plantime\n\tif (props.arr.when != null && props.arr.delay != null) {\n\t\tplantime = getPlanTime(realtime, Number(delayMin))\n\t} else if (props.arr.when != null && delayMin === \"?\") {\n\t\tplantime = realtime\n\t\trealtime = \"\"\n\t} else {\n\t\tplantime =\n\t\t\tgetTime(props.arr.formerScheduledWhen) ||\n\t\t\tgetTime(props.arr.scheduledWhen) ||\n\t\t\tgetTime(props.arr.plannedWhen)\n\t}\n\tconst { line, provenance, remarks, platform } = props.arr\n\treturn (\n\t\t<Fragment>\n\t\t\t<div\n\t\t\t\tclassName=\"row\"\n\t\t\t\tkey={props.arr.tripId}\n\t\t\t\tsx={{ display: \"grid\", gridTemplateColumns: [\"repeat(24,1fr)\", \"repeat(24,1fr)\", \"repeat(26,1fr)\"] }}\n\t\t\t>\n\t\t\t\t<Time time={plantime} class=\"plantime\" />\n\t\t\t\t<Time time={realtime} class=\"realtime\" />\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"delay\"\n\t\t\t\t\tsx={{\n\t\t\t\t\t\ttextAlign: [\"center\", \"center\", \"right\"],\n\t\t\t\t\t\tgridColumn: [\"17 / span 8\", \"5 / span 2\"],\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{delay}\n\t\t\t\t</div>\n\t\t\t\t<Product line={line} />\n\t\t\t\t<Line line={line} />\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"direction\"\n\t\t\t\t\tsx={{ textAlign: \"left\", gridColumn: [\"8 / span 13\", \"11 / span 8\"] }}\n\t\t\t\t>\n\t\t\t\t\t{provenance}\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"platform\"\n\t\t\t\t\tsx={{\n\t\t\t\t\t\ttextAlign: \"center\",\n\t\t\t\t\t\tgridColumn: [\"22 / span 3\", \"19 / span 2\"],\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{platform}\n\t\t\t\t</div>\n\t\t\t\t<Barrier remarks={remarks} />\n\t\t\t\t<Bike remarks={remarks} />\n\t\t\t\t<Warning remarks={remarks} />\n\t\t\t\t<Status remarks={remarks} />\n\t\t\t\t<Carrier operator={line.operator} />\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName=\"row row-add\"\n\t\t\t\tkey={`add:${props.arr.tripId}`}\n\t\t\t\tsx={{\n\t\t\t\t\tdisplay: \"grid\",\n\t\t\t\t\tgridTemplateColumns: \"repeat(24, 1fr)\",\n\t\t\t\t\tborderBottom: [\"1px solid #ccc\", \"1px solid #ccc\", \"none\"],\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Distance distance={distance} />\n\t\t\t\t<Warntext remarks={remarks} />\n\t\t\t\t<Stattext remarks={remarks} />\n\t\t\t</div>\n\t\t</Fragment>\n\t)\n}\n\nexport default Arrival\n"],"names":["Time","lazy","Product","Line","Barrier","Bike","Warning","Status","Warntext","Stattext","getDelay","delay","cancelled","valueRaw","Math","abs","round","getPlanTime","realtime","hours","Number","substring","minutes","hourString","minuteString","getTime","timestamp","props","delayMin","distance","arr","pi","atan","currentTripPosition","stop","currLat","latitude","currLng","longitude","location","rCurrLat","rStopLat","rTheta","cosDist","sin","cos","acos","getDistance","plantime","when","formerScheduledWhen","scheduledWhen","plannedWhen","line","provenance","remarks","platform","Fragment","className","sx","display","gridTemplateColumns","time","class","textAlign","gridColumn","operator","tripId","borderBottom"],"sourceRoot":""}