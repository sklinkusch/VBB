{"version":3,"file":"static/js/985.f2245bbd.chunk.js","mappings":"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","sources":["components/TimetableArr/TimetableArr.tsx"],"sourcesContent":["import React, { useRef, useEffect, lazy } from \"react\"\nimport { useParams, useNavigate } from \"react-router-dom\"\nimport { useDebugState } from \"use-named-state\"\nimport axios from \"axios\"\nimport { getDuration } from \"../helpers/helpers\"\nimport stops from \"../../data/stops\"\nconst Input = lazy(() => import(\"../Input/Input\"))\nconst Select = lazy(() => import(\"../Select/Select\"))\nconst Button = lazy(() => import(\"../Button/Button\"))\nconst Filter = lazy(() => import(\"../Filter/Filter\"))\nconst StopBody = lazy(() => import(\"../StopBody/StopBody\"))\n/* eslint-disable react-hooks/exhaustive-deps */\n\ntype Remarks = {\n\tcode: string | undefined\n\tsummary: string | null | undefined\n\ttext: string\n\ttype: string\n\tvalidFrom: string | undefined\n\tvalidUntil: string | undefined\n}[]\n\ntype Dataset = {\n\tcancelled: boolean | undefined\n\tdelay: number | null\n\tdirection: string | null\n\tformerScheduledWhen?: string\n\tline: {\n\t\texpress: boolean\n\t\tmetro: boolean\n\t\tmode: string\n\t\tname: string\n\t\tnight: boolean\n\t\tproduct: string\n\t\ttype: string\n\t}\n\tplannedPlatform?: string\n\tplannedWhen?: string\n\tplatform?: number | string\n\tprognosedPlatform?: string\n\tprognosisType: string | null | undefined\n\tprovenance: string | null\n\tremarks: Remarks\n\tscheduledWhen?: string\n\tstop: {\n\t\tid: string\n\t\tname: string\n\t}\n\ttripId: string\n\twhen?: string\n}\n\ntype Stop = {\n\tid: string\n\tname: string\n\ttype?: string\n}\n\ntype Data = Dataset[]\n\nexport default function TimetableArr() {\n\tconst [selection, setSelection] = useDebugState<Stop[]>(\"selection\", stops)\n\tconst [stop, setStop] = useDebugState<Stop>(\"stop\", {\n\t\tid: \"\",\n\t\tname: \"\",\n\t\ttype: \"\",\n\t})\n\tconst [data, setData] = useDebugState<Data>(\"data\", [])\n\tconst [date, setDate] = useDebugState<string>(\"date\", \"\")\n\tconst [viewData, setViewData] = useDebugState<Data>(\"viewData\", [])\n\tconst [error, setError] = useDebugState<any>(\"error\", null)\n\tconst params = useParams()\n\tconst navigate = useNavigate()\n\tuseEffect(() => {\n\t\tif (\n\t\t\tparams.hasOwnProperty(\"id\") &&\n\t\t\ttypeof params.id === \"string\" &&\n\t\t\tparams.id.length > 0\n\t\t) {\n\t\t\tconst selectedStop = stops.filter((stop) => stop.id === params.id)[0]\n\t\t\tnavigate(`/arrivals/${params.id}`)\n\t\t\tsetStop(selectedStop)\n\t\t\tgetData(params.id)\n\t\t\tconst remainingStops = stops.filter(\n\t\t\t\t(stop) => stop.name !== selectedStop.name\n\t\t\t)\n\t\t\tconst stopSelection = [selectedStop, ...remainingStops]\n\t\t\tsetSelection(stopSelection)\n\t\t} else {\n\t\t\tconst initialStopArray = stops.filter(\n\t\t\t\t(stop) => stop.name === \"U Stadtmitte\"\n\t\t\t)\n\t\t\tconst [initialStop] = initialStopArray\n\t\t\tconst { id: initialId } = initialStop\n\t\t\tnavigate(`/arrivals/${initialId}`)\n\t\t\tsetStop(initialStop)\n\t\t\tgetData(initialId)\n\t\t\tconst remainingStops = stops.filter(\n\t\t\t\t(stop) => stop.name !== initialStop.name\n\t\t\t)\n\t\t\tconst stopSelection = [initialStop, ...remainingStops]\n\t\t\tsetSelection(stopSelection)\n\t\t}\n\t}, [])\n\tconst inputField = useRef<HTMLInputElement>(null)\n\tconst filterField = useRef<HTMLInputElement>(null)\n\tconst filterSelector = useRef<HTMLSelectElement>(null)\n\tconst filterData = () => {\n\t\tconst fieldCurrent = filterField.current as HTMLInputElement\n\t\tconst { value: fieldValue } = fieldCurrent\n\t\tconst filterValues = fieldValue.split(\" \")\n\t\tconst selectorCurrent = filterSelector.current as HTMLSelectElement\n\t\tconst { value: filterMode } = selectorCurrent\n\t\tif (filterValues.length > 0) {\n\t\t\tif (filterMode === \"OR\") {\n\t\t\t\tfilterOr(filterValues)\n\t\t\t} else {\n\t\t\t\tfilterAnd(filterValues)\n\t\t\t}\n\t\t} else {\n\t\t\tnoFilters()\n\t\t}\n\t}\n\tconst filterOr = (filterValues: string[]) => {\n\t\tconst filteredData = data.filter((arrival) => {\n\t\t\tlet decider = false\n\t\t\tif (arrival.hasOwnProperty(\"provenance\") && arrival.provenance) {\n\t\t\t\tfor (let i = 0; i < filterValues.length; i++) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tarrival.line.name\n\t\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t\t.includes(filterValues[i].toLowerCase()) ||\n\t\t\t\t\t\tarrival.provenance\n\t\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t\t.includes(filterValues[i].toLowerCase())\n\t\t\t\t\t) {\n\t\t\t\t\t\tdecider = true\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn decider\n\t\t})\n\t\tsetViewData(filteredData)\n\t}\n\tconst filterAnd = (filterValues: string[]) => {\n\t\tconst filteredData = data.filter((arrival) => {\n\t\t\tlet decider = true\n\t\t\tif (arrival.hasOwnProperty(\"provenance\") && arrival.provenance) {\n\t\t\t\tfor (let i = 0; i < filterValues.length; i++) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tarrival.line.name\n\t\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t\t.includes(filterValues[i].toLowerCase()) ||\n\t\t\t\t\t\tarrival.provenance\n\t\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t\t.includes(filterValues[i].toLowerCase())\n\t\t\t\t\t) {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdecider = false\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn decider\n\t\t})\n\t\tsetViewData(filteredData)\n\t}\n\tconst noFilters = () => {\n\t\tsetViewData(data)\n\t}\n\tconst filterStops = (filterValue: string) => {\n\t\tconst remainingStops = stops.filter(\n\t\t\t(currStop) =>\n\t\t\t\tcurrStop.id !== stop.id &&\n\t\t\t\tcurrStop.name.toLowerCase().includes(filterValue.toLowerCase())\n\t\t)\n\t\tconst newSelection = [stop, ...remainingStops]\n\t\tsetSelection(newSelection)\n\t}\n\tconst doFilter = (event: { key: string; target: { value: string } }) => {\n\t\t// if (event.key === \"Enter\") {\n\t\tconst filterValue = event.target.value\n\t\tfilterStops(filterValue)\n\t\t// }\n\t}\n\tconst setCurrStop = (currStop: Stop) => {\n\t\tsetStop(currStop)\n\t}\n\tconst getData = async (id: string) => {\n\t\tconst currentStopArray = stops.filter((stop) => stop.id === id)\n\t\tconst [currentStop] = currentStopArray\n\t\tconst { type = \"BBG\" } = currentStop\n\t\tconst duration = getDuration(type)\n\t\tlet lang = \"de\"\n\t\tconst browserLang = navigator.language\n\t\tif (browserLang.startsWith(\"de\")) {\n\t\t\tlang = \"de\"\n\t\t} else {\n\t\t\tlang = \"en\"\n\t\t}\n\t\tconst url = `https://sklinkusch-vbbmicro.vercel.app/?station=${id}&duration=${duration}&mode=arr&language=${lang}`\n\t\tconst response = await axios.get(url)\n\t\tconst { data: resData, status } = await response\n\t\tif (status === 500 || status !== 200) {\n\t\t\tsetError(`HTTP status code: ${status}`)\n\t\t\tsetData([])\n\t\t} else {\n\t\t\tconst myDate = new Date().toLocaleString(\"de-DE\", {\n\t\t\t\tyear: \"numeric\",\n\t\t\t\tmonth: \"2-digit\",\n\t\t\t\tday: \"2-digit\",\n\t\t\t\thour: \"2-digit\",\n\t\t\t\tminute: \"2-digit\",\n\t\t\t\ttimeZone: \"Europe/Berlin\",\n\t\t\t})\n\t\t\tsetDate(myDate)\n\t\t\tsetData(resData)\n\t\t\tsetViewData(resData)\n\t\t\tsetError(null)\n\t\t}\n\t}\n\tconst handleChange = (currentStop: Stop) => {\n\t\tsetCurrStop(currentStop)\n\t\tconst { id: myStopId } = currentStop\n\t\tgetData(myStopId)\n\t\tconst inputCurrent = inputField.current as HTMLInputElement\n\t\tinputCurrent.value = \"\"\n\t\tconst filterFieldCurrent = filterField.current as HTMLInputElement\n\t\tfilterFieldCurrent.value = \"\"\n\t\tconst filterSelectorCurrent = filterSelector.current as HTMLSelectElement\n\t\tfilterSelectorCurrent.value = \"OR\"\n\t}\n\tconst handleSubmit = () => {\n\t\tgetData(stop.id)\n\t\tconst inputCurrent = inputField.current as HTMLInputElement\n\t\tinputCurrent.value = \"\"\n\t\tconst filterFieldCurrent = filterField.current as HTMLInputElement\n\t\tfilterFieldCurrent.value = \"\"\n\t\tconst filterSelectorCurrent = filterSelector.current as HTMLSelectElement\n\t\tfilterSelectorCurrent.value = \"OR\"\n\t}\n\t// useEffect(() => {\n\t//   getData(stop);\n\t// }, []);\n\treturn (\n\t\t<div className=\"timetable\">\n\t\t\t<Input filterStops={doFilter} inputField={inputField} />\n\t\t\t<Select\n\t\t\t\thandleChange={handleChange}\n\t\t\t\tselection={selection}\n\t\t\t\tstop={stop}\n\t\t\t\tmode=\"arr\"\n\t\t\t/>\n\t\t\t<Button handleSubmit={handleSubmit} />\n\t\t\t<Filter\n\t\t\t\tfilterField={filterField}\n\t\t\t\tfilterSelector={filterSelector}\n\t\t\t\tfilterData={filterData}\n\t\t\t\tmode=\"arr\"\n\t\t\t/>\n\t\t\t<StopBody\n\t\t\t\tstop={stop}\n\t\t\t\tdata={viewData}\n\t\t\t\terror={error}\n\t\t\t\tdate={date}\n\t\t\t\tmode=\"arr\"\n\t\t\t/>\n\t\t</div>\n\t)\n}\n"],"names":["Input","lazy","Select","Button","Filter","StopBody","TimetableArr","useDebugState","stops","selection","setSelection","id","name","type","stop","setStop","data","setData","date","setDate","viewData","setViewData","error","setError","params","useParams","navigate","useNavigate","useEffect","hasOwnProperty","length","selectedStop","getData","remainingStops","stopSelection","initialStopArray","initialStop","initialId","inputField","useRef","filterField","filterSelector","filterOr","filterValues","filteredData","filter","arrival","decider","provenance","i","line","toLowerCase","includes","filterAnd","noFilters","currentStopArray","currentStop","duration","getDuration","lang","browserLang","navigator","language","startsWith","url","axios","response","resData","status","myDate","Date","toLocaleString","year","month","day","hour","minute","timeZone","className","filterStops","event","filterValue","currStop","newSelection","target","value","handleChange","myStopId","current","mode","handleSubmit","filterData","split","filterMode"],"sourceRoot":""}