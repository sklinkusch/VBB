{"version":3,"file":"static/js/985.19dede87.chunk.js","mappings":"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","sources":["components/TimetableArr/TimetableArr.tsx"],"sourcesContent":["import React, { useRef, useEffect, lazy } from \"react\"\nimport { useParams, useNavigate } from \"react-router-dom\"\nimport { useDebugState } from \"use-named-state\"\nimport axios from \"axios\"\nimport { getDuration } from \"../helpers/helpers\"\nimport stops from \"../../data/stops\"\nconst Input = lazy(() => import(\"../Input/Input\"))\nconst Select = lazy(() => import(\"../Select/Select\"))\nconst Button = lazy(() => import(\"../Button/Button\"))\nconst Filter = lazy(() => import(\"../Filter/Filter\"))\nconst StopBody = lazy(() => import(\"../StopBody/StopBody\"))\n/* eslint-disable react-hooks/exhaustive-deps */\n\ntype Remarks = {\n  code: string | undefined,\n  summary: string | null | undefined,\n  text: string,\n  type: string,\n  validFrom: string | undefined,\n  validUntil: string | undefined\n}[]\n\ntype Dataset = {\n  cancelled: boolean | undefined,\n  delay: number | null,\n  direction: string | null,\n  formerScheduledWhen?: string,\n  line: {\n    express: boolean,\n    metro: boolean,\n    mode: string,\n    name: string,\n    night: boolean,\n    product: string,\n    type: string\n  },\n  plannedPlatform?: string,\n  plannedWhen?: string,\n  platform?: number | string,\n  prognosedPlatform?: string,\n  prognosisType: string | null | undefined,\n  provenance: string | null,\n  remarks: Remarks,\n  scheduledWhen?: string,\n  stop: {\n    id: string,\n    name: string,\n  },\n  tripId: string,\n  when?: string\n}\n\ntype Stop = {\n  id: string,\n  name: string,\n  type?: string\n}\n\ntype Data = Dataset[]\n\nexport default function TimetableArr() {\n  const [selection, setSelection] = useDebugState<Stop[]>(\"selection\",stops)\n  const [stop, setStop] = useDebugState<Stop>(\"stop\",{ id: \"\", name: \"\", type: \"\"})\n  const [data, setData] = useDebugState<Data>(\"data\",[])\n  const [date, setDate] = useDebugState<string>(\"date\", \"\")\n  const [viewData, setViewData] = useDebugState<Data>(\"viewData\",[])\n  const [error, setError] = useDebugState<any>(\"error\",null)\n  const params = useParams()\n  const navigate = useNavigate()\n  useEffect(() => {\n    if (params.hasOwnProperty(\"id\") && typeof params.id === \"string\" && params.id.length > 0) {\n      const selectedStop = stops.filter(stop => stop.id === params.id)[0]\n      navigate(`/arrivals/${params.id}`)\n      setStop(selectedStop)\n      getData(params.id)\n      const remainingStops = stops.filter(stop => stop.name !== selectedStop.name)\n      const stopSelection = [selectedStop, ...remainingStops]\n      setSelection(stopSelection)\n    } else {\n      const initialStopArray = stops.filter(\n        (stop) => stop.name === \"U Stadtmitte\"\n      )\n      const [initialStop] = initialStopArray\n      const { id: initialId } = initialStop\n      navigate(`/arrivals/${initialId}`)\n      setStop(initialStop)\n      getData(initialId)\n      const remainingStops = stops.filter(\n        (stop) => stop.name !== initialStop.name\n      )\n      const stopSelection = [initialStop, ...remainingStops]\n      setSelection(stopSelection)\n    }\n  }, []) \n  const inputField = useRef<HTMLInputElement>(null)\n  const filterField = useRef<HTMLInputElement>(null)\n  const filterSelector = useRef<HTMLSelectElement>(null)\n  const filterData = () => {\n    const fieldCurrent = filterField.current as HTMLInputElement\n    const { value: fieldValue } = fieldCurrent\n    const filterValues = fieldValue.split(\" \")\n    const selectorCurrent = filterSelector.current as HTMLSelectElement\n    const { value: filterMode } = selectorCurrent\n    if (filterValues.length > 0) {\n      if (filterMode === \"OR\") {\n        filterOr(filterValues)\n      } else {\n        filterAnd(filterValues)\n      }\n    } else {\n      noFilters()\n    }\n  }\n  const filterOr = (filterValues: string[]) => {\n    const filteredData = data.filter((arrival) => {\n      let decider = false\n      if ( arrival.hasOwnProperty(\"provenance\") && arrival.provenance) {\n        for (let i = 0; i < filterValues.length; i++) {\n          if (\n            arrival.line.name\n              .toLowerCase()\n              .includes(filterValues[i].toLowerCase()) ||\n            arrival.provenance\n            .toLowerCase()\n            .includes(filterValues[i].toLowerCase())\n          ) {\n            decider = true\n            break\n          }\n        }\n      }\n      return decider\n    })\n    setViewData(filteredData)\n  }\n  const filterAnd = (filterValues: string[]) => {\n    const filteredData = data.filter((arrival) => {\n      let decider = true\n      if (arrival.hasOwnProperty(\"provenance\") && arrival.provenance) {\n        for (let i = 0; i < filterValues.length; i++) {\n          if (\n            arrival.line.name\n              .toLowerCase()\n              .includes(filterValues[i].toLowerCase()) ||\n            arrival.provenance\n              .toLowerCase()\n              .includes(filterValues[i].toLowerCase())\n          ) {\n            continue\n          } else {\n            decider = false\n            break\n          }\n        }\n      }\n      return decider\n    })\n    setViewData(filteredData)\n  }\n  const noFilters = () => {\n    setViewData(data)\n  }\n  const filterStops = (filterValue: string) => {\n    const remainingStops = stops.filter(\n      (currStop) =>\n        currStop.id !== stop.id &&\n        currStop.name.toLowerCase().includes(filterValue.toLowerCase())\n    )\n    const newSelection = [stop, ...remainingStops]\n    setSelection(newSelection)\n  }\n  const doFilter = (event: { key: string, target: { value: string }}) => {\n    // if (event.key === \"Enter\") {\n    const filterValue = event.target.value\n    filterStops(filterValue)\n    // }\n  }\n  const setCurrStop = (currStop: Stop) => {\n    setStop(currStop)\n  }\n  const getData = async (id: string) => {\n    const currentStopArray = stops.filter((stop) => stop.id === id)\n    const [currentStop] = currentStopArray\n    const { type = \"BBG\" } = currentStop\n    const duration = getDuration(type)\n    let lang = 'de'\n    const browserLang = navigator.language\n    if (browserLang.startsWith('de')) {\n      lang = 'de'\n    } else {\n      lang = 'en'\n    }\n    const url = `https://sklinkusch-vbbmicro.vercel.app/?station=${id}&duration=${duration}&mode=arr&language=${lang}`\n    const response = await axios.get(url)\n    const { data: resData, status } = await response\n    if (status === 500 || status !== 200) {\n      setError(`HTTP status code: ${status}`)\n      setData([])\n    } else {\n      const myDate = (new Date()).toLocaleString('de-DE', { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' })\n      setDate(myDate)\n      setData(resData)\n      setViewData(resData)\n      setError(null)\n    }\n  }\n  const handleChange = (currentStop: Stop) => {\n    setCurrStop(currentStop)\n    const { id: myStopId } = currentStop\n    getData(myStopId)\n    const inputCurrent = inputField.current as HTMLInputElement\n    inputCurrent.value = \"\"\n    const filterFieldCurrent = filterField.current as HTMLInputElement\n    filterFieldCurrent.value = \"\"\n    const filterSelectorCurrent = filterSelector.current as HTMLSelectElement\n    filterSelectorCurrent.value = \"OR\"\n  }\n  const handleSubmit = () => {\n    getData(stop.id)\n    const inputCurrent = inputField.current as HTMLInputElement\n    inputCurrent.value = \"\"\n    const filterFieldCurrent = filterField.current as HTMLInputElement\n    filterFieldCurrent.value = \"\"\n    const filterSelectorCurrent = filterSelector.current as HTMLSelectElement\n    filterSelectorCurrent.value = \"OR\"\n  }\n  // useEffect(() => {\n  //   getData(stop);\n  // }, []);\n  return (\n    <div className=\"timetable\">\n      <Input filterStops={doFilter} inputField={inputField} />\n      <Select handleChange={handleChange} selection={selection} stop={stop} mode=\"arr\" />\n      <Button handleSubmit={handleSubmit} />\n      <Filter\n        filterField={filterField}\n        filterSelector={filterSelector}\n        filterData={filterData}\n        mode=\"arr\"\n      />\n      <StopBody stop={stop} data={viewData} error={error} date={date} mode=\"arr\" />\n    </div>\n  )\n}\n"],"names":["Input","lazy","Select","Button","Filter","StopBody","TimetableArr","useDebugState","stops","selection","setSelection","id","name","type","stop","setStop","data","setData","date","setDate","viewData","setViewData","error","setError","params","useParams","navigate","useNavigate","useEffect","hasOwnProperty","length","selectedStop","getData","remainingStops","stopSelection","initialStopArray","initialStop","initialId","inputField","useRef","filterField","filterSelector","filterOr","filterValues","filteredData","filter","arrival","decider","provenance","i","line","toLowerCase","includes","filterAnd","noFilters","currentStopArray","currentStop","duration","getDuration","lang","browserLang","navigator","language","startsWith","url","axios","response","resData","status","myDate","Date","toLocaleString","year","month","day","hour","minute","className","filterStops","event","filterValue","currStop","newSelection","target","value","handleChange","myStopId","current","mode","handleSubmit","filterData","split","filterMode"],"sourceRoot":""}