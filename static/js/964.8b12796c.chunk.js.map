{"version":3,"file":"static/js/964.8b12796c.chunk.js","mappings":"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","sources":["components/Button/Button.tsx","components/Filter/Filter.tsx","components/Input/Input.tsx","components/Legendrow/Legendrow.tsx","components/Select/Select.tsx","components/LegendDep/LegendDep.tsx","components/Timetable/Timetable.tsx","pages/VBBDepartures.tsx"],"sourcesContent":["/** @jsxImportSource theme-ui */\nimport { Fragment, MouseEventHandler } from \"react\";\n\ntype Props = {\n  handleSubmit: MouseEventHandler\n}\n\nexport default function Button({ handleSubmit }: Props) {\n  return (\n    <Fragment>\n      <button onClick={handleSubmit} sx={{ padding: \"5px\", backgroundColor: \"#ccc\", opacity: 1 }}>\n        <i className=\"fas fa-redo-alt\" />\n      </button>\n    </Fragment>\n  );\n}\n","/** @jsxImportSource theme-ui */\nimport React, { ChangeEventHandler } from \"react\"\nimport getLocale from \"../Locales/getLocale\"\n\ntype Props = {\n  mode: string,\n  filterField: React.Ref<HTMLInputElement>,\n  filterSelector: React.Ref<HTMLSelectElement>\n  filterData: ChangeEventHandler\n}\n\nexport default function Filter(props: Props) {\n  const { filterField, filterSelector, filterData, mode = \"dep\" } = props\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder={mode === \"dep\" ? getLocale(\"filterDepartures\") : getLocale(\"filterArrivals\")}\n        ref={filterField}\n        onChange={(event) => props.filterData(event)}\n        sx={{ padding: \"5px\", opacity: 1, backgroundColor: \"#fff\", width: \"300px\", maxWidth: \"90%\" }}\n      />\n      <select ref={filterSelector} onChange={filterData} sx={{ padding: \"5px\", backgroundColor: \"#ccc\", opacity: 1, width: \"400px\", maxWidth: \"90%\", mx: \"10px\" }}>\n        <option value=\"OR\">{getLocale(\"filterOr\")}</option>\n        <option value=\"AND\">{getLocale(\"filterAnd\")}</option>\n      </select>\n    </div>\n  )\n}\n","/** @jsxImportSource theme-ui */\nimport { Fragment } from \"react\"\nimport getLocale from \"../Locales/getLocale\"\n\ntype Props = {\n  filterStops: Function,\n  inputField: React.Ref<HTMLInputElement>\n}\n\nexport default function Input({ filterStops, inputField }: Props) {\n  return (\n    <Fragment>\n      <input\n        type=\"text\"\n        onChange={(event) => filterStops(event)}\n        ref={inputField}\n        placeholder={getLocale(\"filterStops\")}\n        sx={{ padding: \"5px\", opacity: 1, backgroundColor: \"#fff\", width: \"300px\", maxWidth: \"90%\" }}\n      />\n    </Fragment>\n  )\n}\n","/** @jsxImportSource theme-ui */\nimport React from \"react\";\n\ntype Props = {\n  left: any,\n  right: string\n}\n\nexport default function Legendrow({left, right}: Props) {\n  return (\n    <React.Fragment>\n      <div className=\"legendleft\" sx={{ gridColumn: \"1 / span 4\" }}>{left}</div>\n      <div className=\"legendright\" sx={{ textAlign: \"left\", gridColumn: \"5 / span 20\" }}>{right}</div>\n    </React.Fragment>\n  );\n}\n","/** @jsxImportSource theme-ui */\nimport { Fragment } from \"react\"\nimport { useNavigate } from \"react-router-dom\"\n\ntype Stop = {\n  id: string,\n  name: string,\n}\n\ntype Props = {\n  handleChange: Function,\n  mode: string,\n  stop: Stop,\n  selection: Stop[]\n}\n\nexport default function Select(props: Props) {\n  const { handleChange, selection, stop, mode } = props\n  const navigate = useNavigate()\n  return (\n    <Fragment>\n      <select\n        value={stop.id}\n        sx={{ padding: \"5px\", backgroundColor: \"#ccc\", opacity: 1, width: \"400px\", maxWidth: \"90%\", mx: \"10px\" }}\n        onChange={(event) => {\n          const id = event.target.value\n          const stop = selection.filter((stop) => stop.id === id)[0]\n          return handleChange(stop)\n        }}\n      >\n        {selection &&\n          selection.length >= 1 &&\n          selection.map((stop, index) => (\n            <option onClick={() => navigate(mode === 'arr' ? `/arrivals/${stop.id}` : `/departures/${stop.id}`)} key={`${stop.id}-${index}`} value={stop.id}>\n              {stop.name}\n            </option>\n          ))}\n      </select>\n    </Fragment>\n  )\n}\n","/** @jsxImportSource theme-ui */\nimport Legendrow from \"../Legendrow/Legendrow\";\nimport getLocale from \"../Locales/getLocale\";\n\nexport default function LegendDep() {\n  return (\n    <div className=\"legend\" sx={{ display: [\"none\", \"none\", \"grid\"], gridTemplateColumns: \"repeat(24,1fr)\", border: \"2px solid black\", width: \"70%\", margin: \"0 auto 40px auto\", borderRadius: \"10px\" }}>\n      <h3 sx={{ gridColumn: \"1 / span 24\" }}>{getLocale(\"legend\")}</h3>\n      <Legendrow\n        left={getLocale(\"scheduled\")}\n        right={getLocale(\"scheduledDesc\")}\n      />\n      <Legendrow\n        left={getLocale(\"real\")}\n        right={getLocale(\"realDesc\")}\n      />\n      <Legendrow left={getLocale(\"delay\")} right={getLocale(\"delayDesc\")} />\n      <Legendrow left={getLocale(\"line\")} right={getLocale(\"lineDesc\")} />\n      <Legendrow left={getLocale(\"direction\")} right={getLocale(\"directionDesc\")} />\n      <Legendrow\n        left={<span className=\"fas fa-wheelchair\" />}\n        right={getLocale(\"barrierfree\")}\n      />\n      <Legendrow\n        left={<span className=\"fas fa-bicycle\" />}\n        right={getLocale(\"bike\")}\n      />\n      <Legendrow\n        left={<span className=\"fas fa-exclamation-triangle\" />}\n        right={getLocale(\"attention\")}\n      />\n      <Legendrow\n        left={<span className=\"fas fa-times\" />}\n        right={getLocale(\"cancelled\")}\n      />\n    </div>\n  );\n}\n","/** @jsxImportSource theme-ui */\nimport { useRef, useEffect } from \"react\"\nimport { useParams, useNavigate } from \"react-router-dom\"\nimport { useDebugState } from \"use-named-state\"\nimport axios from \"axios\"\nimport { getDuration } from \"../helpers/helpers\"\nimport stops from \"../../data/stops\"\nimport Input from \"../Input/Input\"\nimport Select from \"../Select/Select\"\nimport Button from \"../Button/Button\"\nimport Filter from \"../Filter/Filter\"\nimport StopBody from \"../StopBody/StopBody\"\n// const Input = lazy(() => import(\"./Input\"))\n// const Select = lazy(() => import(\"./Select\"))\n// const Button = lazy(() => import(\"./Button\"))\n// const Filter = lazy(() => import(\"./Filter\"))\n// const StopBody = lazy(() => import(\"./StopBody\"))\n/* eslint-disable react-hooks/exhaustive-deps */\n\ntype Remarks = {\n  code: string | undefined,\n  summary: string | null | undefined,\n  text: string,\n  type: string,\n  validFrom: string | undefined,\n  validUntil: string | undefined\n}[]\n\ntype Dataset = {\n  cancelled: boolean | undefined,\n  delay: number | null,\n  direction: string | null,\n  formerScheduledWhen?: string,\n  line: {\n    express: boolean,\n    metro: boolean,\n    mode: string,\n    name: string,\n    night: boolean,\n    product: string,\n    type: string\n  },\n  plannedPlatform?: string,\n  plannedWhen?: string,\n  platform?: number | string,\n  prognosedPlatform?: string,\n  prognosisType: string | null | undefined,\n  provenance: string | null,\n  remarks: Remarks,\n  scheduledWhen?: string,\n  stop: {\n    id: string,\n    name: string,\n  },\n  tripId: string,\n  when?: string\n}\n\ntype Stop = {\n  id: string,\n  name: string,\n  type?: string\n}\n\ntype Data = Dataset[]\n\nexport default function Timetable() {\n  const [selection, setSelection] = useDebugState<Stop[]>(\"selection\",stops)\n  const [stop, setStop] = useDebugState<Stop>(\"stop\", { id: \"\", name: \"\", type: \"\"})\n  const [data, setData] = useDebugState<Data>(\"data\",[])\n  const [date, setDate] = useDebugState<string>(\"date\", \"\")\n  const [viewData, setViewData] = useDebugState<Data>(\"viewData\",[])\n  const [error, setError] = useDebugState<any>(\"error\",null)\n  const params = useParams()\n  const navigate = useNavigate()\n  useEffect(() => {\n    if (params.hasOwnProperty(\"id\") && typeof params.id === \"string\" && params.id.length > 0) {\n      const selectedStop = stops.filter(stop => stop.id === params.id)[0]\n      navigate(`/departures/${params.id}`)\n      setStop(selectedStop)\n      getData(params.id)\n      const remainingStops = stops.filter(stop => stop.name !== selectedStop.name)\n      const stopSelection = [selectedStop, ...remainingStops]\n      setSelection(stopSelection)\n    } else {\n      const initialStopArray = stops.filter(\n        (stop) => stop.name === \"U Stadtmitte\"\n      )\n      const [initialStop] = initialStopArray\n      const { id: initialId } = initialStop\n      navigate(`/departures/${initialId}`)\n      setStop(initialStop)\n      getData(initialId)\n      const remainingStops = stops.filter(\n        (stop) => stop.name !== initialStop.name\n      )\n      const stopSelection = [initialStop, ...remainingStops]\n      setSelection(stopSelection)\n    }\n  }, []) \n  const inputField = useRef<HTMLInputElement>(null)\n  const filterField = useRef<HTMLInputElement>(null)\n  const filterSelector = useRef<HTMLSelectElement>(null)\n  const filterData = () => {\n    const fieldCurrent = filterField.current as HTMLInputElement\n    const { value: fieldValue } = fieldCurrent\n    const filterValues = fieldValue.split(\" \")\n    const selectorCurrent = filterSelector.current as HTMLSelectElement\n    const { value: filterMode } = selectorCurrent\n    if (filterValues.length > 0) {\n      if (filterMode === \"OR\") {\n        filterOr(filterValues)\n      } else {\n        filterAnd(filterValues)\n      }\n    } else {\n      noFilters()\n    }\n  }\n  const filterOr = (filterValues: string[]) => {\n    const filteredData = data.filter((departure) => {\n      let decider = false\n      if (departure.hasOwnProperty(\"direction\") && departure.direction){\n        for (let i = 0; i < filterValues.length; i++) {\n          if (\n            departure.line.name\n              .toLowerCase()\n              .includes(filterValues[i].toLowerCase()) ||\n            departure.direction\n              .toLowerCase()\n              .includes(filterValues[i].toLowerCase())\n          ) {\n            decider = true\n            break\n          }\n        }\n      }\n      return decider\n    })\n    setViewData(filteredData)\n  }\n  const filterAnd = (filterValues: string[]) => {\n    const filteredData = data.filter((departure) => {\n      let decider = true\n      if (departure.hasOwnProperty(\"direction\") && departure.direction) {\n        for (let i = 0; i < filterValues.length; i++) {\n          if (\n            departure.line.name\n              .toLowerCase()\n              .includes(filterValues[i].toLowerCase()) ||\n            departure.direction\n              .toLowerCase()\n              .includes(filterValues[i].toLowerCase())\n          ) {\n            continue\n          } else {\n            decider = false\n            break\n          }\n        }\n      }\n      return decider\n    })\n    setViewData(filteredData)\n  }\n  const noFilters = () => {\n    setViewData(data)\n  }\n  const filterStops = (filterValue: string) => {\n    const remainingStops = stops.filter(\n      (currStop) =>\n        currStop.id !== stop.id &&\n        currStop.name.toLowerCase().includes(filterValue.toLowerCase())\n    )\n    const newSelection = [stop, ...remainingStops]\n    setSelection(newSelection)\n  }\n  const doFilter = (event: { key: string, target: { value: string }}) => {\n    // if (event.key === \"Enter\") {\n    const filterValue = event.target.value\n    filterStops(filterValue)\n    // }\n  }\n  const setCurrStop = (currStop: Stop) => {\n    setStop(currStop)\n  }\n  const getData = async (id: string) => {\n    const currentStopArray = stops.filter((stop) => stop.id === id)\n    const [currentStop] = currentStopArray\n    const { type = \"BBG\" } = currentStop\n    const duration = getDuration(type)\n    let lang = 'de'\n    const browserLang = navigator.language\n    if (browserLang.startsWith('de')) {\n      lang = 'de'\n    } else {\n      lang = 'en'\n    }\n    const url = `https://sklinkusch-vbbmicro.vercel.app/?station=${id}&duration=${duration}&language=${lang}`\n    const response = await axios.get(url)\n    const { data: resData, status } = await response\n    if (status === 500 || status !== 200) {\n      setError(`HTTP status code: ${status}`)\n      setData([])\n    } else {\n      const myDate = (new Date()).toLocaleString('de-DE', { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' })\n      setDate(myDate)\n      setData(resData)\n      setViewData(resData)\n      setError(null)\n    }\n  }\n  const handleChange = (currentStop: Stop) => {\n    setCurrStop(currentStop)\n    const { id: myStopId } = currentStop\n    getData(myStopId)\n    const inputCurrent = inputField.current as HTMLInputElement\n    inputCurrent.value = \"\"\n    const filterFieldCurrent = filterField.current as HTMLInputElement\n    filterFieldCurrent.value = \"\"\n    const filterSelectorCurrent = filterSelector.current as HTMLSelectElement\n    filterSelectorCurrent.value = \"OR\"\n  }\n  const handleSubmit = () => {\n    getData(stop.id)\n    const inputCurrent = inputField.current as HTMLInputElement\n    inputCurrent.value = \"\"\n    const filterFieldCurrent = filterField.current as HTMLInputElement\n    filterFieldCurrent.value = \"\"\n    const filterSelectorCurrent = filterSelector.current as HTMLSelectElement\n    filterSelectorCurrent.value = \"OR\"\n  }\n  // useEffect(() => {\n  //   getData(stop);\n  // }, []);\n  return (\n    <div className=\"timetable\" sx={{ minHeight: \"75vh\" }}>\n      {inputField && (<Input filterStops={doFilter} inputField={inputField} />)}\n      <Select handleChange={handleChange} selection={selection} stop={stop} mode=\"dep\" />\n      <Button handleSubmit={handleSubmit} />\n      <Filter\n        filterField={filterField}\n        filterSelector={filterSelector}\n        filterData={filterData}\n        mode=\"dep\"\n      />\n      <StopBody stop={stop} data={viewData} error={error} date={date} mode=\"dep\" />\n    </div>\n  )\n}\n","import React from \"react\"\n// import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\"\nimport LegendDep from \"../components/LegendDep/LegendDep\"\nimport Timetable from \"../components/Timetable/Timetable\"\n// const LegendDep = lazy(() => import(\"../components/LegendDep\"))\n// const Timetable = lazy(() => import(\"../components/Timetable\"))\n\nfunction VBBDepartures() {\n  // let pathProps\n  // switch(process.env.NODE_ENV) {\n  //   case \"development\":\n  //     pathProps = { basename: process.env.PUBLIC_URL }\n  //     //  pathProps = {}\n  //     break\n  //   case \"production\":\n  //     pathProps = { basename: process.env.PUBLIC_URL }\n  //     // pathProps = {}\n  //     break\n  //   default:\n  //     pathProps = { basename: process.env.PUBLIC_URL }\n  //     // pathProps = {}\n  // }\n  return (\n    <div>\n      <LegendDep />\n      {/* <Router { ...pathProps }>\n        <Routes>\n          <Route path=\"/:stopId\" element={<Timetable />} />\n          <Route path=\"\" element={< Timetable />} />\n          <Route path=\"*\" element={< Timetable />} />\n        </Routes>\n      </Router> */}\n      <Timetable />\n    </div>\n  )\n}\n\nexport default VBBDepartures\n"],"names":["Button","handleSubmit","Fragment","onClick","sx","padding","backgroundColor","opacity","className","Filter","props","filterField","filterSelector","filterData","mode","type","placeholder","getLocale","ref","onChange","event","width","maxWidth","mx","value","Input","filterStops","inputField","Legendrow","left","right","gridColumn","textAlign","Select","handleChange","selection","stop","navigate","useNavigate","id","target","filter","length","map","index","name","LegendDep","display","gridTemplateColumns","border","margin","borderRadius","Timetable","useDebugState","stops","setSelection","setStop","data","setData","date","setDate","viewData","setViewData","error","setError","params","useParams","useEffect","hasOwnProperty","selectedStop","getData","remainingStops","stopSelection","initialStopArray","initialStop","initialId","useRef","filterOr","filterValues","filteredData","departure","decider","direction","i","line","toLowerCase","includes","filterAnd","noFilters","currentStopArray","currentStop","duration","getDuration","lang","browserLang","navigator","language","startsWith","url","axios","response","resData","status","myDate","Date","toLocaleString","year","month","day","hour","minute","minHeight","filterValue","currStop","newSelection","myStopId","current","split","filterMode","StopBody"],"sourceRoot":""}